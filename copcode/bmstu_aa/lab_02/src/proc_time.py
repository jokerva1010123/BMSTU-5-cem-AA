from time import process_time
from multi_matrix import matrix_multiply, vinograd, optimized_vinograd
import matplotlib.pyplot as plt
import random


def generate_random_matrix(n, m):
    matrix = [[0] * m for _ in range(n)]
    for i in range(n):
        for j in range(m):
            matrix[i][j] = random.randint(-100, 100)
    return matrix


def get_proc_time(matrix1, matrix2, func, n):
    time = 0
    for _ in range(n):
        start = process_time()
        func(matrix1, matrix2)
        stop = process_time()
        time += stop - start
    return time / n


def get_plots(mtr_size, times, msg):
    time_1 = [times[i][0] for i in range(len(times))]
    time_2 = [times[i][1] for i in range(len(times))]
    time_3 = [times[i][2] for i in range(len(times))]

    plt.figure(1)
    plt.title(msg)
    plt.plot(mtr_size, time_1, label='Классический')
    plt.plot(mtr_size, time_2, label='Винограда')
    plt.plot(mtr_size, time_3, label='Винограда с оптимизацией')
    plt.xlabel('Размер матрицы NxN')
    plt.ylabel('Время')
    plt.legend(loc='best', fontsize=12)
    plt.grid(True)
    plt.show()


def get_times(matrix1, matrix2, mtr_size):
    repeat_num = 200
    proc_time_1 = get_proc_time(matrix1, matrix2, matrix_multiply, repeat_num)
    proc_time_2 = get_proc_time(matrix1, matrix2, vinograd, repeat_num)
    proc_time_3 = get_proc_time(matrix1, matrix2, optimized_vinograd, repeat_num)
    print("|{:^8}|{:^25.6f}|{:^25.6f}|{:^26.6f}|".format(mtr_size, proc_time_1, proc_time_2, proc_time_3))
    print("|{:^8}|{:^25}|{:^25}|{:^26}|".format("-" * 8, "-" * 25, "-" * 25, "-" * 26))
    return [proc_time_1, proc_time_2, proc_time_3]


def analyze_algorythms():
    max_len = 500
    step = 50
    print("|{:^8}|{:^78}|".format("-" * 8, "-" * 77))
    print("|{:^8}|{:^25}|{:^25}|{:^26}|".format("", "Классический", "Винограда", "Винограда с оптимизацией"))
    print("|{:^8}|{:^25}|{:^25}|{:^26}|".format("-" * 8, "-" * 25, "-" * 25, "-" * 26))
    mtr_size = [i for i in range(step, max_len, step)]
    times = []
    for i in range(step, max_len, step):
        matrix1 = generate_random_matrix(i, i)
        matrix2 = generate_random_matrix(i, i)
        times.append(get_times(matrix1, matrix2, i))
    get_plots(mtr_size, times, "Умножение квадратных матриц")


# |--------|----------------------------------------------------------------------------- |
# |        |      Классический       |        Винограда        | Винограда с оптимизацией |
# |--------|-------------------------|-------------------------|--------------------------|
# |   50   |        0.016719         |        0.017500         |         0.016875         |
# |--------|-------------------------|-------------------------|--------------------------|
# |  100   |        0.128750         |        0.135000         |         0.129688         |
# |--------|-------------------------|-------------------------|--------------------------|
# |  150   |        0.436250         |        0.456406         |         0.440469         |
# |--------|-------------------------|-------------------------|--------------------------|
# |  200   |        1.036250         |        1.088750         |         1.049063         |
# |--------|-------------------------|-------------------------|--------------------------|
# |  250   |        2.038125         |        2.114063         |         2.042187         |
# |--------|-------------------------|-------------------------|--------------------------|
# |  300   |        3.661719         |        3.858594         |         3.649688         |
# |--------|-------------------------|-------------------------|--------------------------|


# |--------|----------------------------------------------------------------------------- |
# |        |      Классический       |        Винограда        | Винограда с оптимизацией |
# |--------|-------------------------|-------------------------|--------------------------|
# |   50   |        0.026328         |        0.023984         |         0.021094         |
# |--------|-------------------------|-------------------------|--------------------------|
# |  100   |        0.165547         |        0.174063         |         0.164062         |
# |--------|-------------------------|-------------------------|--------------------------|
# |  150   |        0.565937         |        0.456016         |         0.458047         |
# |--------|-------------------------|-------------------------|--------------------------|
# |  200   |        1.135781         |        1.183828         |         1.235234         |
# |--------|-------------------------|-------------------------|--------------------------|
# |  250   |        2.311016         |        2.591016         |         2.154219         |
# |--------|-------------------------|-------------------------|--------------------------|
# |  300   |        4.498516         |        4.429297         |         3.884453         |
# |--------|-------------------------|-------------------------|--------------------------|
# |  350   |        6.387656         |        7.152188         |         6.172891         |
# |--------|-------------------------|-------------------------|--------------------------|
# |  400   |        9.993828         |        10.394141        |         9.592266         |
# |--------|-------------------------|-------------------------|--------------------------|
# |  450   |        13.757500        |        15.271719        |        13.475078         |
# |--------|-------------------------|-------------------------|--------------------------|